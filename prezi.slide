JSON serialization in Go
Go Meetup 2014 Oct

Zoltan Giber 
Backend Developer at Cubilog

zgiber@gmail.com

* 
- Few words about JSON
- The basics: json.Marshal & json.Unmarshal
- Add flexibility by using tags
- Formatting JSON output (pretty vs. compact)
- Nested data structures
- Decoding arbitrary data
- Writing your own: json.Marshaler & json.Unmarshaler interfaces
- Partial decoding with json.RawMessage type

* JSON
- Common format for backend - browser communication, configuration etc.
- It's human readable 
- Relatively easy to debug
- Built on name/value pairs and ordered list
- It's not for: channel, complex, function types or cyclic data structures
 
For a complete reference: [[json.org]]
A great reading about JSON in go: [[http://blog.golang.org/json-and-go]]

* json.Marshal
- Uses reflection, requiring exported (public) fields on the struct.
- First character of the struct's field name is upper case (exported)
 func Marshal(v interface{}) ([]byte, error)
.play ./examples/marshalcat/marshalcat.go /stop OMIT/,/start OMIT/

* json.Unmarshal
- Same rules apply
- The struct must be passed as a pointer
 func Unmarshal(data []byte, v interface{}) error
.play ./examples/unmarshark/unmarshark.go /stop OMIT/,/start OMIT/

* Tags
- Rename fields
- Omit empty
- Omit a field with "-"
.play ./examples/tags/tags.go /stop OMIT/,/start OMIT/
.play ./examples/tags/tags.go /stop1 OMIT/,/start1 OMIT/

* Make it print pretty
- json.Indent
.code ./examples/pretty/pretty.go /stop OMIT/,/start 
.play ./examples/pretty/pretty.go /stop1 OMIT/,/start1 OMIT/

* Make it compact
- json.Compact
- It's a simple way to save some bytes
- Appends to a buffer
.play ./examples/compact/compact.go /stop OMIT/,/start OMIT/

* Encoding nested structures
- Not much different than flat structs
.code ./examples/nested/encode/nested.go /stop OMIT/,/start OMIT/
.play ./examples/nested/encode/nested.go /stop1 OMIT/,/start1 OMIT/
* Decoding nested structures
.code ./examples/nested/decode/nested.go /stop OMIT/,/start OMIT/
.play ./examples/nested/decode/nested.go /stop1 OMIT/,/start1 OMIT/
- What if the JSON structure is unknown?

* Arbitrary data
- Remember? Everything implements (empty) interface{}
- JSON Decodes into map[string]interface{}
- Requires type assertion to access underlying type
.code ./examples/arbitrary/arbitrary.go /stop OMIT/,/start OMIT/
.code ./examples/arbitrary/arbitrary.go /stop1 OMIT/,/start1 OMIT/
.play ./examples/arbitrary/arbitrary.go /stop2 OMIT/,/start2 OMIT/

* Write your own
- json.Marshaler & json.Unmarshaler interfaces
- Encode or decode into something different
.code ./examples/yourown/yourown.go /stop OMIT/,/start OMIT/
.play ./examples/yourown/yourown.go /stop2 OMIT/,/start2 OMIT/

* Encoding into a JSON stream with json.Encoder
- Uses the io.Writer interface
- Files, connections, buffers are all implementing io.Writer
.play ./examples/usingfile/usingfile.go /stop OMIT/,/start OMIT/
[[http://127.0.0.1:3999/animals.json]]

* Decoding a JSON stream with json.Decoder
- Multiple objects vs. a single array
- Let's see an http get example
.play ./examples/httpget/httpget.go /stop OMIT/,/start OMIT/


* RawMessage
 type RawMessage []byte
- If you don't want to decode a field at the moment but need the data later
.play ./examples/rawmessage/rawmessage.go /stop OMIT/,/start OMIT/
